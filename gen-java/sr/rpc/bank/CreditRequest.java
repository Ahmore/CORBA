/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sr.rpc.bank;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-04-30")
public class CreditRequest implements org.apache.thrift.TBase<CreditRequest, CreditRequest._Fields>, java.io.Serializable, Cloneable, Comparable<CreditRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreditRequest");

  private static final org.apache.thrift.protocol.TField GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("guid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FROM_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromDate", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TO_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("toDate", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreditRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreditRequestTupleSchemeFactory();

  public java.lang.String guid; // required
  public java.lang.String currency; // required
  public Date fromDate; // required
  public Date toDate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GUID((short)1, "guid"),
    CURRENCY((short)2, "currency"),
    FROM_DATE((short)3, "fromDate"),
    TO_DATE((short)4, "toDate");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GUID
          return GUID;
        case 2: // CURRENCY
          return CURRENCY;
        case 3: // FROM_DATE
          return FROM_DATE;
        case 4: // TO_DATE
          return TO_DATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GUID, new org.apache.thrift.meta_data.FieldMetaData("guid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FROM_DATE, new org.apache.thrift.meta_data.FieldMetaData("fromDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Date.class)));
    tmpMap.put(_Fields.TO_DATE, new org.apache.thrift.meta_data.FieldMetaData("toDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Date.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreditRequest.class, metaDataMap);
  }

  public CreditRequest() {
  }

  public CreditRequest(
    java.lang.String guid,
    java.lang.String currency,
    Date fromDate,
    Date toDate)
  {
    this();
    this.guid = guid;
    this.currency = currency;
    this.fromDate = fromDate;
    this.toDate = toDate;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreditRequest(CreditRequest other) {
    if (other.isSetGuid()) {
      this.guid = other.guid;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    if (other.isSetFromDate()) {
      this.fromDate = new Date(other.fromDate);
    }
    if (other.isSetToDate()) {
      this.toDate = new Date(other.toDate);
    }
  }

  public CreditRequest deepCopy() {
    return new CreditRequest(this);
  }

  @Override
  public void clear() {
    this.guid = null;
    this.currency = null;
    this.fromDate = null;
    this.toDate = null;
  }

  public java.lang.String getGuid() {
    return this.guid;
  }

  public CreditRequest setGuid(java.lang.String guid) {
    this.guid = guid;
    return this;
  }

  public void unsetGuid() {
    this.guid = null;
  }

  /** Returns true if field guid is set (has been assigned a value) and false otherwise */
  public boolean isSetGuid() {
    return this.guid != null;
  }

  public void setGuidIsSet(boolean value) {
    if (!value) {
      this.guid = null;
    }
  }

  public java.lang.String getCurrency() {
    return this.currency;
  }

  public CreditRequest setCurrency(java.lang.String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public Date getFromDate() {
    return this.fromDate;
  }

  public CreditRequest setFromDate(Date fromDate) {
    this.fromDate = fromDate;
    return this;
  }

  public void unsetFromDate() {
    this.fromDate = null;
  }

  /** Returns true if field fromDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFromDate() {
    return this.fromDate != null;
  }

  public void setFromDateIsSet(boolean value) {
    if (!value) {
      this.fromDate = null;
    }
  }

  public Date getToDate() {
    return this.toDate;
  }

  public CreditRequest setToDate(Date toDate) {
    this.toDate = toDate;
    return this;
  }

  public void unsetToDate() {
    this.toDate = null;
  }

  /** Returns true if field toDate is set (has been assigned a value) and false otherwise */
  public boolean isSetToDate() {
    return this.toDate != null;
  }

  public void setToDateIsSet(boolean value) {
    if (!value) {
      this.toDate = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case GUID:
      if (value == null) {
        unsetGuid();
      } else {
        setGuid((java.lang.String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((java.lang.String)value);
      }
      break;

    case FROM_DATE:
      if (value == null) {
        unsetFromDate();
      } else {
        setFromDate((Date)value);
      }
      break;

    case TO_DATE:
      if (value == null) {
        unsetToDate();
      } else {
        setToDate((Date)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GUID:
      return getGuid();

    case CURRENCY:
      return getCurrency();

    case FROM_DATE:
      return getFromDate();

    case TO_DATE:
      return getToDate();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GUID:
      return isSetGuid();
    case CURRENCY:
      return isSetCurrency();
    case FROM_DATE:
      return isSetFromDate();
    case TO_DATE:
      return isSetToDate();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CreditRequest)
      return this.equals((CreditRequest)that);
    return false;
  }

  public boolean equals(CreditRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_guid = true && this.isSetGuid();
    boolean that_present_guid = true && that.isSetGuid();
    if (this_present_guid || that_present_guid) {
      if (!(this_present_guid && that_present_guid))
        return false;
      if (!this.guid.equals(that.guid))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_fromDate = true && this.isSetFromDate();
    boolean that_present_fromDate = true && that.isSetFromDate();
    if (this_present_fromDate || that_present_fromDate) {
      if (!(this_present_fromDate && that_present_fromDate))
        return false;
      if (!this.fromDate.equals(that.fromDate))
        return false;
    }

    boolean this_present_toDate = true && this.isSetToDate();
    boolean that_present_toDate = true && that.isSetToDate();
    if (this_present_toDate || that_present_toDate) {
      if (!(this_present_toDate && that_present_toDate))
        return false;
      if (!this.toDate.equals(that.toDate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGuid()) ? 131071 : 524287);
    if (isSetGuid())
      hashCode = hashCode * 8191 + guid.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrency()) ? 131071 : 524287);
    if (isSetCurrency())
      hashCode = hashCode * 8191 + currency.hashCode();

    hashCode = hashCode * 8191 + ((isSetFromDate()) ? 131071 : 524287);
    if (isSetFromDate())
      hashCode = hashCode * 8191 + fromDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetToDate()) ? 131071 : 524287);
    if (isSetToDate())
      hashCode = hashCode * 8191 + toDate.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CreditRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetGuid()).compareTo(other.isSetGuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guid, other.guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFromDate()).compareTo(other.isSetFromDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromDate, other.fromDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToDate()).compareTo(other.isSetToDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.toDate, other.toDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CreditRequest(");
    boolean first = true;

    sb.append("guid:");
    if (this.guid == null) {
      sb.append("null");
    } else {
      sb.append(this.guid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromDate:");
    if (this.fromDate == null) {
      sb.append("null");
    } else {
      sb.append(this.fromDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toDate:");
    if (this.toDate == null) {
      sb.append("null");
    } else {
      sb.append(this.toDate);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (fromDate != null) {
      fromDate.validate();
    }
    if (toDate != null) {
      toDate.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreditRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CreditRequestStandardScheme getScheme() {
      return new CreditRequestStandardScheme();
    }
  }

  private static class CreditRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<CreditRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreditRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guid = iprot.readString();
              struct.setGuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FROM_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.fromDate = new Date();
              struct.fromDate.read(iprot);
              struct.setFromDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TO_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.toDate = new Date();
              struct.toDate.read(iprot);
              struct.setToDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreditRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(struct.guid);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
        oprot.writeString(struct.currency);
        oprot.writeFieldEnd();
      }
      if (struct.fromDate != null) {
        oprot.writeFieldBegin(FROM_DATE_FIELD_DESC);
        struct.fromDate.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.toDate != null) {
        oprot.writeFieldBegin(TO_DATE_FIELD_DESC);
        struct.toDate.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreditRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CreditRequestTupleScheme getScheme() {
      return new CreditRequestTupleScheme();
    }
  }

  private static class CreditRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<CreditRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreditRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGuid()) {
        optionals.set(0);
      }
      if (struct.isSetCurrency()) {
        optionals.set(1);
      }
      if (struct.isSetFromDate()) {
        optionals.set(2);
      }
      if (struct.isSetToDate()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetGuid()) {
        oprot.writeString(struct.guid);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetFromDate()) {
        struct.fromDate.write(oprot);
      }
      if (struct.isSetToDate()) {
        struct.toDate.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreditRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.guid = iprot.readString();
        struct.setGuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fromDate = new Date();
        struct.fromDate.read(iprot);
        struct.setFromDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.toDate = new Date();
        struct.toDate.read(iprot);
        struct.setToDateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

