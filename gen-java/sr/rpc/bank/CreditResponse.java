/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package sr.rpc.bank;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-04-29")
public class CreditResponse implements org.apache.thrift.TBase<CreditResponse, CreditResponse._Fields>, java.io.Serializable, Cloneable, Comparable<CreditResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreditResponse");

  private static final org.apache.thrift.protocol.TField GUID_FIELD_DESC = new org.apache.thrift.protocol.TField("guid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENCY1_FIELD_DESC = new org.apache.thrift.protocol.TField("currency1", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENCY2_FIELD_DESC = new org.apache.thrift.protocol.TField("currency2", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AMOUNT1_FIELD_DESC = new org.apache.thrift.protocol.TField("amount1", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField AMOUNT2_FIELD_DESC = new org.apache.thrift.protocol.TField("amount2", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CreditResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CreditResponseTupleSchemeFactory();

  public java.lang.String guid; // required
  public java.lang.String currency1; // required
  public java.lang.String currency2; // required
  public double amount1; // required
  public double amount2; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    GUID((short)1, "guid"),
    CURRENCY1((short)2, "currency1"),
    CURRENCY2((short)3, "currency2"),
    AMOUNT1((short)4, "amount1"),
    AMOUNT2((short)5, "amount2");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GUID
          return GUID;
        case 2: // CURRENCY1
          return CURRENCY1;
        case 3: // CURRENCY2
          return CURRENCY2;
        case 4: // AMOUNT1
          return AMOUNT1;
        case 5: // AMOUNT2
          return AMOUNT2;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AMOUNT1_ISSET_ID = 0;
  private static final int __AMOUNT2_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GUID, new org.apache.thrift.meta_data.FieldMetaData("guid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY1, new org.apache.thrift.meta_data.FieldMetaData("currency1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY2, new org.apache.thrift.meta_data.FieldMetaData("currency2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AMOUNT1, new org.apache.thrift.meta_data.FieldMetaData("amount1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AMOUNT2, new org.apache.thrift.meta_data.FieldMetaData("amount2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreditResponse.class, metaDataMap);
  }

  public CreditResponse() {
  }

  public CreditResponse(
    java.lang.String guid,
    java.lang.String currency1,
    java.lang.String currency2,
    double amount1,
    double amount2)
  {
    this();
    this.guid = guid;
    this.currency1 = currency1;
    this.currency2 = currency2;
    this.amount1 = amount1;
    setAmount1IsSet(true);
    this.amount2 = amount2;
    setAmount2IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreditResponse(CreditResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetGuid()) {
      this.guid = other.guid;
    }
    if (other.isSetCurrency1()) {
      this.currency1 = other.currency1;
    }
    if (other.isSetCurrency2()) {
      this.currency2 = other.currency2;
    }
    this.amount1 = other.amount1;
    this.amount2 = other.amount2;
  }

  public CreditResponse deepCopy() {
    return new CreditResponse(this);
  }

  @Override
  public void clear() {
    this.guid = null;
    this.currency1 = null;
    this.currency2 = null;
    setAmount1IsSet(false);
    this.amount1 = 0.0;
    setAmount2IsSet(false);
    this.amount2 = 0.0;
  }

  public java.lang.String getGuid() {
    return this.guid;
  }

  public CreditResponse setGuid(java.lang.String guid) {
    this.guid = guid;
    return this;
  }

  public void unsetGuid() {
    this.guid = null;
  }

  /** Returns true if field guid is set (has been assigned a value) and false otherwise */
  public boolean isSetGuid() {
    return this.guid != null;
  }

  public void setGuidIsSet(boolean value) {
    if (!value) {
      this.guid = null;
    }
  }

  public java.lang.String getCurrency1() {
    return this.currency1;
  }

  public CreditResponse setCurrency1(java.lang.String currency1) {
    this.currency1 = currency1;
    return this;
  }

  public void unsetCurrency1() {
    this.currency1 = null;
  }

  /** Returns true if field currency1 is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency1() {
    return this.currency1 != null;
  }

  public void setCurrency1IsSet(boolean value) {
    if (!value) {
      this.currency1 = null;
    }
  }

  public java.lang.String getCurrency2() {
    return this.currency2;
  }

  public CreditResponse setCurrency2(java.lang.String currency2) {
    this.currency2 = currency2;
    return this;
  }

  public void unsetCurrency2() {
    this.currency2 = null;
  }

  /** Returns true if field currency2 is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency2() {
    return this.currency2 != null;
  }

  public void setCurrency2IsSet(boolean value) {
    if (!value) {
      this.currency2 = null;
    }
  }

  public double getAmount1() {
    return this.amount1;
  }

  public CreditResponse setAmount1(double amount1) {
    this.amount1 = amount1;
    setAmount1IsSet(true);
    return this;
  }

  public void unsetAmount1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT1_ISSET_ID);
  }

  /** Returns true if field amount1 is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT1_ISSET_ID);
  }

  public void setAmount1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT1_ISSET_ID, value);
  }

  public double getAmount2() {
    return this.amount2;
  }

  public CreditResponse setAmount2(double amount2) {
    this.amount2 = amount2;
    setAmount2IsSet(true);
    return this;
  }

  public void unsetAmount2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMOUNT2_ISSET_ID);
  }

  /** Returns true if field amount2 is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMOUNT2_ISSET_ID);
  }

  public void setAmount2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMOUNT2_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case GUID:
      if (value == null) {
        unsetGuid();
      } else {
        setGuid((java.lang.String)value);
      }
      break;

    case CURRENCY1:
      if (value == null) {
        unsetCurrency1();
      } else {
        setCurrency1((java.lang.String)value);
      }
      break;

    case CURRENCY2:
      if (value == null) {
        unsetCurrency2();
      } else {
        setCurrency2((java.lang.String)value);
      }
      break;

    case AMOUNT1:
      if (value == null) {
        unsetAmount1();
      } else {
        setAmount1((java.lang.Double)value);
      }
      break;

    case AMOUNT2:
      if (value == null) {
        unsetAmount2();
      } else {
        setAmount2((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case GUID:
      return getGuid();

    case CURRENCY1:
      return getCurrency1();

    case CURRENCY2:
      return getCurrency2();

    case AMOUNT1:
      return getAmount1();

    case AMOUNT2:
      return getAmount2();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case GUID:
      return isSetGuid();
    case CURRENCY1:
      return isSetCurrency1();
    case CURRENCY2:
      return isSetCurrency2();
    case AMOUNT1:
      return isSetAmount1();
    case AMOUNT2:
      return isSetAmount2();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CreditResponse)
      return this.equals((CreditResponse)that);
    return false;
  }

  public boolean equals(CreditResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_guid = true && this.isSetGuid();
    boolean that_present_guid = true && that.isSetGuid();
    if (this_present_guid || that_present_guid) {
      if (!(this_present_guid && that_present_guid))
        return false;
      if (!this.guid.equals(that.guid))
        return false;
    }

    boolean this_present_currency1 = true && this.isSetCurrency1();
    boolean that_present_currency1 = true && that.isSetCurrency1();
    if (this_present_currency1 || that_present_currency1) {
      if (!(this_present_currency1 && that_present_currency1))
        return false;
      if (!this.currency1.equals(that.currency1))
        return false;
    }

    boolean this_present_currency2 = true && this.isSetCurrency2();
    boolean that_present_currency2 = true && that.isSetCurrency2();
    if (this_present_currency2 || that_present_currency2) {
      if (!(this_present_currency2 && that_present_currency2))
        return false;
      if (!this.currency2.equals(that.currency2))
        return false;
    }

    boolean this_present_amount1 = true;
    boolean that_present_amount1 = true;
    if (this_present_amount1 || that_present_amount1) {
      if (!(this_present_amount1 && that_present_amount1))
        return false;
      if (this.amount1 != that.amount1)
        return false;
    }

    boolean this_present_amount2 = true;
    boolean that_present_amount2 = true;
    if (this_present_amount2 || that_present_amount2) {
      if (!(this_present_amount2 && that_present_amount2))
        return false;
      if (this.amount2 != that.amount2)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetGuid()) ? 131071 : 524287);
    if (isSetGuid())
      hashCode = hashCode * 8191 + guid.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrency1()) ? 131071 : 524287);
    if (isSetCurrency1())
      hashCode = hashCode * 8191 + currency1.hashCode();

    hashCode = hashCode * 8191 + ((isSetCurrency2()) ? 131071 : 524287);
    if (isSetCurrency2())
      hashCode = hashCode * 8191 + currency2.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount1);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amount2);

    return hashCode;
  }

  @Override
  public int compareTo(CreditResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetGuid()).compareTo(other.isSetGuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.guid, other.guid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrency1()).compareTo(other.isSetCurrency1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency1, other.currency1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCurrency2()).compareTo(other.isSetCurrency2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency2, other.currency2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAmount1()).compareTo(other.isSetAmount1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount1, other.amount1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAmount2()).compareTo(other.isSetAmount2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount2, other.amount2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CreditResponse(");
    boolean first = true;

    sb.append("guid:");
    if (this.guid == null) {
      sb.append("null");
    } else {
      sb.append(this.guid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency1:");
    if (this.currency1 == null) {
      sb.append("null");
    } else {
      sb.append(this.currency1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency2:");
    if (this.currency2 == null) {
      sb.append("null");
    } else {
      sb.append(this.currency2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount1:");
    sb.append(this.amount1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount2:");
    sb.append(this.amount2);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreditResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CreditResponseStandardScheme getScheme() {
      return new CreditResponseStandardScheme();
    }
  }

  private static class CreditResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<CreditResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreditResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.guid = iprot.readString();
              struct.setGuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENCY1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency1 = iprot.readString();
              struct.setCurrency1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENCY2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency2 = iprot.readString();
              struct.setCurrency2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AMOUNT1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount1 = iprot.readDouble();
              struct.setAmount1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AMOUNT2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.amount2 = iprot.readDouble();
              struct.setAmount2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreditResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.guid != null) {
        oprot.writeFieldBegin(GUID_FIELD_DESC);
        oprot.writeString(struct.guid);
        oprot.writeFieldEnd();
      }
      if (struct.currency1 != null) {
        oprot.writeFieldBegin(CURRENCY1_FIELD_DESC);
        oprot.writeString(struct.currency1);
        oprot.writeFieldEnd();
      }
      if (struct.currency2 != null) {
        oprot.writeFieldBegin(CURRENCY2_FIELD_DESC);
        oprot.writeString(struct.currency2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AMOUNT1_FIELD_DESC);
      oprot.writeDouble(struct.amount1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AMOUNT2_FIELD_DESC);
      oprot.writeDouble(struct.amount2);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreditResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CreditResponseTupleScheme getScheme() {
      return new CreditResponseTupleScheme();
    }
  }

  private static class CreditResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<CreditResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreditResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetGuid()) {
        optionals.set(0);
      }
      if (struct.isSetCurrency1()) {
        optionals.set(1);
      }
      if (struct.isSetCurrency2()) {
        optionals.set(2);
      }
      if (struct.isSetAmount1()) {
        optionals.set(3);
      }
      if (struct.isSetAmount2()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetGuid()) {
        oprot.writeString(struct.guid);
      }
      if (struct.isSetCurrency1()) {
        oprot.writeString(struct.currency1);
      }
      if (struct.isSetCurrency2()) {
        oprot.writeString(struct.currency2);
      }
      if (struct.isSetAmount1()) {
        oprot.writeDouble(struct.amount1);
      }
      if (struct.isSetAmount2()) {
        oprot.writeDouble(struct.amount2);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreditResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.guid = iprot.readString();
        struct.setGuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currency1 = iprot.readString();
        struct.setCurrency1IsSet(true);
      }
      if (incoming.get(2)) {
        struct.currency2 = iprot.readString();
        struct.setCurrency2IsSet(true);
      }
      if (incoming.get(3)) {
        struct.amount1 = iprot.readDouble();
        struct.setAmount1IsSet(true);
      }
      if (incoming.get(4)) {
        struct.amount2 = iprot.readDouble();
        struct.setAmount2IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

